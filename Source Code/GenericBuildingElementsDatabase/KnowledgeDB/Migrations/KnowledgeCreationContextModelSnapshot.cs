// <auto-generated />
using KnowledgeDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace KnowledgeDB.Migrations
{
    [DbContext(typeof(KnowledgeCreationContext))]
    partial class KnowledgeCreationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("KnowledgeDB.ConstructionTypeName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ConstructionTypeNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wood"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Brick"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Reinforced Concrete"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Steel"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hybrid"
                        });
                });

            modelBuilder.Entity("KnowledgeDB.DefaultThicknessRange", b =>
                {
                    b.Property<int>("KG3xxNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LayerTypeNameId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ThicknessAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessMax")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessMin")
                        .HasColumnType("REAL");

                    b.HasKey("KG3xxNameId", "LayerTypeNameId");

                    b.HasIndex("LayerTypeNameId");

                    b.ToTable("DefaultThicknessRanges");
                });

            modelBuilder.Entity("KnowledgeDB.EnergyStandardName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnergyStandardNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GEG"
                        },
                        new
                        {
                            Id = 2,
                            Name = "NZEB"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Passive"
                        });
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SurfaceRId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SurfaceRId");

                    b.ToTable("KG3x0Names");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "320",
                            SurfaceRId = 3
                        },
                        new
                        {
                            Id = 2,
                            Name = "330A",
                            SurfaceRId = 4
                        },
                        new
                        {
                            Id = 3,
                            Name = "330B",
                            SurfaceRId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "330C",
                            SurfaceRId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "340A",
                            SurfaceRId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "340B",
                            SurfaceRId = 5
                        },
                        new
                        {
                            Id = 7,
                            Name = "350",
                            SurfaceRId = 5
                        },
                        new
                        {
                            Id = 8,
                            Name = "360A",
                            SurfaceRId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "360B",
                            SurfaceRId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Window",
                            SurfaceRId = 5
                        });
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Name_EnergyStandardName", b =>
                {
                    b.Property<int>("Id1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id2")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RequiredU")
                        .HasColumnType("REAL");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("KG3x0Name_EnergyStandardNames");

                    b.HasData(
                        new
                        {
                            Id1 = 1,
                            Id2 = 1,
                            RequiredU = 0.26250000000000001
                        },
                        new
                        {
                            Id1 = 1,
                            Id2 = 2,
                            RequiredU = 0.20599999999999999
                        },
                        new
                        {
                            Id1 = 1,
                            Id2 = 3,
                            RequiredU = 0.14999999999999999
                        },
                        new
                        {
                            Id1 = 2,
                            Id2 = 1,
                            RequiredU = 0.26250000000000001
                        },
                        new
                        {
                            Id1 = 2,
                            Id2 = 2,
                            RequiredU = 0.20599999999999999
                        },
                        new
                        {
                            Id1 = 2,
                            Id2 = 3,
                            RequiredU = 0.14999999999999999
                        },
                        new
                        {
                            Id1 = 3,
                            Id2 = 1,
                            RequiredU = 0.20999999999999999
                        },
                        new
                        {
                            Id1 = 3,
                            Id2 = 2,
                            RequiredU = 0.17999999999999999
                        },
                        new
                        {
                            Id1 = 3,
                            Id2 = 3,
                            RequiredU = 0.14999999999999999
                        },
                        new
                        {
                            Id1 = 4,
                            Id2 = 1,
                            RequiredU = 0.20999999999999999
                        },
                        new
                        {
                            Id1 = 4,
                            Id2 = 2,
                            RequiredU = 0.17999999999999999
                        },
                        new
                        {
                            Id1 = 4,
                            Id2 = 3,
                            RequiredU = 0.14999999999999999
                        },
                        new
                        {
                            Id1 = 8,
                            Id2 = 1,
                            RequiredU = 0.14999999999999999
                        },
                        new
                        {
                            Id1 = 8,
                            Id2 = 2,
                            RequiredU = 0.13500000000000001
                        },
                        new
                        {
                            Id1 = 8,
                            Id2 = 3,
                            RequiredU = 0.12
                        },
                        new
                        {
                            Id1 = 9,
                            Id2 = 1,
                            RequiredU = 0.14999999999999999
                        },
                        new
                        {
                            Id1 = 9,
                            Id2 = 2,
                            RequiredU = 0.13500000000000001
                        },
                        new
                        {
                            Id1 = 9,
                            Id2 = 3,
                            RequiredU = 0.12
                        },
                        new
                        {
                            Id1 = 10,
                            Id2 = 1,
                            RequiredU = 0.97499999999999998
                        },
                        new
                        {
                            Id1 = 10,
                            Id2 = 2,
                            RequiredU = 0.88800000000000001
                        },
                        new
                        {
                            Id1 = 10,
                            Id2 = 3,
                            RequiredU = 0.80000000000000004
                        });
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Name_KG3xxName", b =>
                {
                    b.Property<int>("Id1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id1", "Id2", "Position");

                    b.HasIndex("Id2");

                    b.ToTable("KG3x0Name_KG3xxNames");

                    b.HasData(
                        new
                        {
                            Id1 = 1,
                            Id2 = 1,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 1,
                            Id2 = 2,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 1,
                            Id2 = 3,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 2,
                            Id2 = 9,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 2,
                            Id2 = 4,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 2,
                            Id2 = 7,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 3,
                            Id2 = 9,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 3,
                            Id2 = 5,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 3,
                            Id2 = 8,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 4,
                            Id2 = 9,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 4,
                            Id2 = 6,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 4,
                            Id2 = 8,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 5,
                            Id2 = 12,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 5,
                            Id2 = 10,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 5,
                            Id2 = 12,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 6,
                            Id2 = 12,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 6,
                            Id2 = 11,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 6,
                            Id2 = 12,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 7,
                            Id2 = 14,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 7,
                            Id2 = 13,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 7,
                            Id2 = 15,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 8,
                            Id2 = 17,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 8,
                            Id2 = 16,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 8,
                            Id2 = 18,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 9,
                            Id2 = 17,
                            Position = 1
                        },
                        new
                        {
                            Id1 = 9,
                            Id2 = 16,
                            Position = 2
                        },
                        new
                        {
                            Id1 = 9,
                            Id2 = 18,
                            Position = 3
                        },
                        new
                        {
                            Id1 = 10,
                            Id2 = 19,
                            Position = 1
                        });
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConstructionTypeNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionTypeNameId");

                    b.HasIndex("NameId");

                    b.ToTable("KG3x0Options");
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Option_KG3xxOption", b =>
                {
                    b.Property<int>("Id1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("KG3x0_KG3xxs");
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReplacementOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReplacementOrderId");

                    b.ToTable("KG3xxNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "324",
                            ReplacementOrderId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "322",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "325",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "331A",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 5,
                            Name = "331B",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 6,
                            Name = "332",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 7,
                            Name = "335A",
                            ReplacementOrderId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "335B",
                            ReplacementOrderId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "336",
                            ReplacementOrderId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "341",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "342",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "345",
                            ReplacementOrderId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "351",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "353",
                            ReplacementOrderId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "354",
                            ReplacementOrderId = 2
                        },
                        new
                        {
                            Id = 16,
                            Name = "361",
                            ReplacementOrderId = 3
                        },
                        new
                        {
                            Id = 17,
                            Name = "363",
                            ReplacementOrderId = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "364",
                            ReplacementOrderId = 2
                        },
                        new
                        {
                            Id = 19,
                            Name = "334",
                            ReplacementOrderId = 4
                        });
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxName_Layer", b =>
                {
                    b.Property<int>("Id1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LifeSpan")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("KG3xxName_Layers");
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReplacementOrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.HasIndex("ReplacementOrderId");

                    b.ToTable("KG3xxOptions");
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxOption_LayerTypeName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id1");

                    b.HasIndex("Id2");

                    b.ToTable("KG3xx_LayerTypeNames");
                });

            modelBuilder.Entity("KnowledgeDB.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<double>("Lambda")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("OekobaudatDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UUID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OekobaudatDataId");

                    b.ToTable("Layers");
                });

            modelBuilder.Entity("KnowledgeDB.LayerTypeName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Is2Component")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LayerTypeNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Is2Component = false,
                            Name = "boards"
                        },
                        new
                        {
                            Id = 2,
                            Is2Component = false,
                            Name = "cladding"
                        },
                        new
                        {
                            Id = 3,
                            Is2Component = false,
                            Name = "complete curtain wall"
                        },
                        new
                        {
                            Id = 4,
                            Is2Component = false,
                            Name = "complete dividing wall"
                        },
                        new
                        {
                            Id = 5,
                            Is2Component = false,
                            Name = "complete slab"
                        },
                        new
                        {
                            Id = 6,
                            Is2Component = false,
                            Name = "complete wall"
                        },
                        new
                        {
                            Id = 7,
                            Is2Component = false,
                            Name = "concrete"
                        },
                        new
                        {
                            Id = 8,
                            Is2Component = false,
                            Name = "door"
                        },
                        new
                        {
                            Id = 9,
                            Is2Component = false,
                            Name = "EIFS"
                        },
                        new
                        {
                            Id = 10,
                            Is2Component = false,
                            Name = "finish"
                        },
                        new
                        {
                            Id = 11,
                            Is2Component = false,
                            Name = "flooring"
                        },
                        new
                        {
                            Id = 12,
                            Is2Component = false,
                            Name = "frame"
                        },
                        new
                        {
                            Id = 13,
                            Is2Component = false,
                            Name = "growing medium"
                        },
                        new
                        {
                            Id = 14,
                            Is2Component = false,
                            Name = "handle"
                        },
                        new
                        {
                            Id = 15,
                            Is2Component = false,
                            Name = "hardware"
                        },
                        new
                        {
                            Id = 16,
                            Is2Component = false,
                            Name = "insulation"
                        },
                        new
                        {
                            Id = 17,
                            Is2Component = false,
                            Name = "insulation hard"
                        },
                        new
                        {
                            Id = 18,
                            Is2Component = false,
                            Name = "insulation soft"
                        },
                        new
                        {
                            Id = 19,
                            Is2Component = false,
                            Name = "light strip"
                        },
                        new
                        {
                            Id = 20,
                            Is2Component = false,
                            Name = "loose fill"
                        },
                        new
                        {
                            Id = 21,
                            Is2Component = false,
                            Name = "masonry unit"
                        },
                        new
                        {
                            Id = 22,
                            Is2Component = false,
                            Name = "mortar"
                        },
                        new
                        {
                            Id = 23,
                            Is2Component = false,
                            Name = "plaster"
                        },
                        new
                        {
                            Id = 24,
                            Is2Component = false,
                            Name = "rebar"
                        },
                        new
                        {
                            Id = 25,
                            Is2Component = false,
                            Name = "screed"
                        },
                        new
                        {
                            Id = 26,
                            Is2Component = false,
                            Name = "separating layer"
                        },
                        new
                        {
                            Id = 27,
                            Is2Component = false,
                            Name = "shutter"
                        },
                        new
                        {
                            Id = 28,
                            Is2Component = false,
                            Name = "structure"
                        },
                        new
                        {
                            Id = 29,
                            Is2Component = false,
                            Name = "structure-steel"
                        },
                        new
                        {
                            Id = 30,
                            Is2Component = false,
                            Name = "structure-wood"
                        },
                        new
                        {
                            Id = 31,
                            Is2Component = false,
                            Name = "transparent"
                        },
                        new
                        {
                            Id = 32,
                            Is2Component = false,
                            Name = "vapour barrier"
                        },
                        new
                        {
                            Id = 33,
                            Is2Component = false,
                            Name = "waterproofing"
                        },
                        new
                        {
                            Id = 34,
                            Is2Component = false,
                            Name = "moving air"
                        },
                        new
                        {
                            Id = 35,
                            Is2Component = false,
                            Name = "static air layer"
                        },
                        new
                        {
                            Id = 36,
                            Is2Component = true,
                            Name = "Dummy"
                        },
                        new
                        {
                            Id = 37,
                            Is2Component = true,
                            Name = "reinforced concrete"
                        },
                        new
                        {
                            Id = 38,
                            Is2Component = true,
                            Name = "insulated wood frame"
                        },
                        new
                        {
                            Id = 39,
                            Is2Component = true,
                            Name = "insulated steel frame"
                        },
                        new
                        {
                            Id = 40,
                            Is2Component = true,
                            Name = "masonry wall"
                        },
                        new
                        {
                            Id = 41,
                            Is2Component = true,
                            Name = "ventilation layer"
                        },
                        new
                        {
                            Id = 42,
                            Is2Component = true,
                            Name = "insulated wood substructure"
                        },
                        new
                        {
                            Id = 43,
                            Is2Component = true,
                            Name = "insulated steel substructure"
                        },
                        new
                        {
                            Id = 44,
                            Is2Component = true,
                            Name = "window"
                        });
                });

            modelBuilder.Entity("KnowledgeDB.Layer_StandardLayerType", b =>
                {
                    b.Property<int>("Id1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id2")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id1", "Id2");

                    b.HasIndex("Id2");

                    b.ToTable("Layer_StandardLayerTypes");
                });

            modelBuilder.Entity("KnowledgeDB.OekobaudatData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("GWPA1_A3")
                        .HasColumnType("REAL");

                    b.Property<double>("GWPC3")
                        .HasColumnType("REAL");

                    b.Property<double>("GWPC4")
                        .HasColumnType("REAL");

                    b.Property<double>("GWPD")
                        .HasColumnType("REAL");

                    b.Property<string>("UUID")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("OekobaudatDatas");
                });

            modelBuilder.Entity("KnowledgeDB.ReplacementOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Order")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ReplacementOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = "Position 1 most accessible"
                        },
                        new
                        {
                            Id = 2,
                            Order = "Position 1 least accessible"
                        },
                        new
                        {
                            Id = 3,
                            Order = "No Replacement"
                        },
                        new
                        {
                            Id = 4,
                            Order = "Custom"
                        });
                });

            modelBuilder.Entity("KnowledgeDB.StandardLayerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("StandardLayerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameId = 1
                        },
                        new
                        {
                            Id = 2,
                            NameId = 2
                        },
                        new
                        {
                            Id = 3,
                            NameId = 3
                        },
                        new
                        {
                            Id = 4,
                            NameId = 4
                        },
                        new
                        {
                            Id = 5,
                            NameId = 5
                        },
                        new
                        {
                            Id = 6,
                            NameId = 6
                        },
                        new
                        {
                            Id = 7,
                            NameId = 7
                        },
                        new
                        {
                            Id = 8,
                            NameId = 8
                        },
                        new
                        {
                            Id = 9,
                            NameId = 9
                        },
                        new
                        {
                            Id = 10,
                            NameId = 10
                        },
                        new
                        {
                            Id = 11,
                            NameId = 11
                        },
                        new
                        {
                            Id = 12,
                            NameId = 12
                        },
                        new
                        {
                            Id = 13,
                            NameId = 13
                        },
                        new
                        {
                            Id = 14,
                            NameId = 14
                        },
                        new
                        {
                            Id = 15,
                            NameId = 15
                        },
                        new
                        {
                            Id = 16,
                            NameId = 16
                        },
                        new
                        {
                            Id = 17,
                            NameId = 17
                        },
                        new
                        {
                            Id = 18,
                            NameId = 18
                        },
                        new
                        {
                            Id = 19,
                            NameId = 19
                        },
                        new
                        {
                            Id = 20,
                            NameId = 20
                        },
                        new
                        {
                            Id = 21,
                            NameId = 21
                        },
                        new
                        {
                            Id = 22,
                            NameId = 22
                        },
                        new
                        {
                            Id = 23,
                            NameId = 23
                        },
                        new
                        {
                            Id = 24,
                            NameId = 24
                        },
                        new
                        {
                            Id = 25,
                            NameId = 25
                        },
                        new
                        {
                            Id = 26,
                            NameId = 26
                        },
                        new
                        {
                            Id = 27,
                            NameId = 27
                        },
                        new
                        {
                            Id = 28,
                            NameId = 28
                        },
                        new
                        {
                            Id = 29,
                            NameId = 29
                        },
                        new
                        {
                            Id = 30,
                            NameId = 30
                        },
                        new
                        {
                            Id = 31,
                            NameId = 31
                        },
                        new
                        {
                            Id = 32,
                            NameId = 32
                        },
                        new
                        {
                            Id = 33,
                            NameId = 33
                        },
                        new
                        {
                            Id = 34,
                            NameId = 34
                        },
                        new
                        {
                            Id = 35,
                            NameId = 35
                        });
                });

            modelBuilder.Entity("KnowledgeDB.SurfaceR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Rse")
                        .HasColumnType("REAL");

                    b.Property<double>("Rsi")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("SurfaceRs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Rse = 0.040000000000000001,
                            Rsi = 0.13
                        },
                        new
                        {
                            Id = 2,
                            Rse = 0.040000000000000001,
                            Rsi = 0.10000000000000001
                        },
                        new
                        {
                            Id = 3,
                            Rse = 0.0,
                            Rsi = 0.17000000000000001
                        },
                        new
                        {
                            Id = 4,
                            Rse = 0.0,
                            Rsi = 0.13
                        },
                        new
                        {
                            Id = 5,
                            Rse = 0.0,
                            Rsi = 0.0
                        });
                });

            modelBuilder.Entity("KnowledgeDB.ThicknessRange", b =>
                {
                    b.Property<int>("KG3xxNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LayerTypeNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ThicknessAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessMax")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessMin")
                        .HasColumnType("REAL");

                    b.HasKey("KG3xxNameId", "LayerTypeNameId", "LayerId");

                    b.HasIndex("LayerId");

                    b.HasIndex("LayerTypeNameId");

                    b.ToTable("ThicknessRanges");
                });

            modelBuilder.Entity("KnowledgeDB.TwoComponentLayerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Component1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Component2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SeparateReplacement")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Component1Id");

                    b.HasIndex("Component2Id");

                    b.HasIndex("NameId");

                    b.ToTable("TwoComponentLayerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Component1Id = 1,
                            Component2Id = 2,
                            NameId = 36,
                            SeparateReplacement = false
                        },
                        new
                        {
                            Id = 2,
                            Component1Id = 7,
                            Component2Id = 24,
                            NameId = 37,
                            SeparateReplacement = false
                        },
                        new
                        {
                            Id = 3,
                            Component1Id = 30,
                            Component2Id = 18,
                            NameId = 38,
                            SeparateReplacement = true
                        },
                        new
                        {
                            Id = 4,
                            Component1Id = 29,
                            Component2Id = 18,
                            NameId = 39,
                            SeparateReplacement = true
                        },
                        new
                        {
                            Id = 5,
                            Component1Id = 21,
                            Component2Id = 22,
                            NameId = 40,
                            SeparateReplacement = false
                        },
                        new
                        {
                            Id = 6,
                            Component1Id = 29,
                            Component2Id = 34,
                            NameId = 41,
                            SeparateReplacement = false
                        },
                        new
                        {
                            Id = 7,
                            Component1Id = 30,
                            Component2Id = 18,
                            NameId = 42,
                            SeparateReplacement = true
                        },
                        new
                        {
                            Id = 8,
                            Component1Id = 29,
                            Component2Id = 18,
                            NameId = 43,
                            SeparateReplacement = true
                        },
                        new
                        {
                            Id = 9,
                            Component1Id = 31,
                            Component2Id = 12,
                            NameId = 44,
                            SeparateReplacement = false
                        });
                });

            modelBuilder.Entity("KnowledgeDB.TwoComponentUncertainty", b =>
                {
                    b.Property<int>("KG3xxNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LayerTypeNameId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Component2PercentageAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("Component2PercentageMax")
                        .HasColumnType("REAL");

                    b.Property<double>("Component2PercentageMin")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessAverage")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessMax")
                        .HasColumnType("REAL");

                    b.Property<double>("ThicknessMin")
                        .HasColumnType("REAL");

                    b.HasKey("KG3xxNameId", "LayerTypeNameId");

                    b.HasIndex("LayerTypeNameId");

                    b.ToTable("TwoComponentUncertainties");
                });

            modelBuilder.Entity("KnowledgeDB.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceUnit")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReferenceValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("KnowledgeDB.VariationParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("KG3x0OptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KG3xxOption_LayerTypeNameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("KG3x0OptionId");

                    b.HasIndex("KG3xxOption_LayerTypeNameId");

                    b.HasIndex("NameId");

                    b.ToTable("VariationParams");
                });

            modelBuilder.Entity("KnowledgeDB.VariationTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VariationTargets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Thermal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Structural"
                        });
                });

            modelBuilder.Entity("KnowledgeDB.DefaultThicknessRange", b =>
                {
                    b.HasOne("KnowledgeDB.KG3xxName", "KG3xxName")
                        .WithMany()
                        .HasForeignKey("KG3xxNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.LayerTypeName", "LayerTypeName")
                        .WithMany()
                        .HasForeignKey("LayerTypeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Name", b =>
                {
                    b.HasOne("KnowledgeDB.SurfaceR", "SurfaceR")
                        .WithMany()
                        .HasForeignKey("SurfaceRId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Name_EnergyStandardName", b =>
                {
                    b.HasOne("KnowledgeDB.KG3x0Name", "Type1")
                        .WithMany()
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.EnergyStandardName", "Type2")
                        .WithMany()
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Name_KG3xxName", b =>
                {
                    b.HasOne("KnowledgeDB.KG3x0Name", "Type1")
                        .WithMany("KG3x0Name_KG3xxNames")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.KG3xxName", "Type2")
                        .WithMany("KG3x0Name_KG3xxNames")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Option", b =>
                {
                    b.HasOne("KnowledgeDB.ConstructionTypeName", "ConstructionTypeName")
                        .WithMany()
                        .HasForeignKey("ConstructionTypeNameId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.KG3x0Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3x0Option_KG3xxOption", b =>
                {
                    b.HasOne("KnowledgeDB.KG3x0Option", "Type1")
                        .WithMany("KG3x0_KG3xxs")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.KG3xxOption", "Type2")
                        .WithMany("KG3x0_KG3xxs")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxName", b =>
                {
                    b.HasOne("KnowledgeDB.ReplacementOrder", "ReplacementOrder")
                        .WithMany()
                        .HasForeignKey("ReplacementOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxName_Layer", b =>
                {
                    b.HasOne("KnowledgeDB.KG3xxName", "Type1")
                        .WithMany("KG3xxName_Layers")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.Layer", "Type2")
                        .WithMany("KG3xxName_Layers")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxOption", b =>
                {
                    b.HasOne("KnowledgeDB.KG3xxName", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.ReplacementOrder", "ReplacementOrder")
                        .WithMany()
                        .HasForeignKey("ReplacementOrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.KG3xxOption_LayerTypeName", b =>
                {
                    b.HasOne("KnowledgeDB.KG3xxOption", "Type1")
                        .WithMany("KG3xx_LayerTypeNames")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.LayerTypeName", "Type2")
                        .WithMany("KG3xx_LayerTypeNames")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.Layer", b =>
                {
                    b.HasOne("KnowledgeDB.OekobaudatData", "OekobaudatData")
                        .WithMany()
                        .HasForeignKey("OekobaudatDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.Layer_StandardLayerType", b =>
                {
                    b.HasOne("KnowledgeDB.Layer", "Type1")
                        .WithMany("Layer_StandardLayerTypes")
                        .HasForeignKey("Id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.StandardLayerType", "Type2")
                        .WithMany("Layer_StandardLayerTypes")
                        .HasForeignKey("Id2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.OekobaudatData", b =>
                {
                    b.HasOne("KnowledgeDB.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.StandardLayerType", b =>
                {
                    b.HasOne("KnowledgeDB.LayerTypeName", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.ThicknessRange", b =>
                {
                    b.HasOne("KnowledgeDB.KG3xxName", "KG3xxName")
                        .WithMany()
                        .HasForeignKey("KG3xxNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.Layer", "Layer")
                        .WithMany()
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.LayerTypeName", "LayerTypeName")
                        .WithMany()
                        .HasForeignKey("LayerTypeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.TwoComponentLayerType", b =>
                {
                    b.HasOne("KnowledgeDB.StandardLayerType", "Component1")
                        .WithMany()
                        .HasForeignKey("Component1Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.StandardLayerType", "Component2")
                        .WithMany()
                        .HasForeignKey("Component2Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.LayerTypeName", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.TwoComponentUncertainty", b =>
                {
                    b.HasOne("KnowledgeDB.KG3xxName", "KG3xxName")
                        .WithMany()
                        .HasForeignKey("KG3xxNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.LayerTypeName", "LayerTypeName")
                        .WithMany()
                        .HasForeignKey("LayerTypeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KnowledgeDB.VariationParam", b =>
                {
                    b.HasOne("KnowledgeDB.KG3x0Option", "KG3X0Option")
                        .WithMany()
                        .HasForeignKey("KG3x0OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.KG3xxOption_LayerTypeName", "KG3xxOption_LayerTypeName")
                        .WithMany()
                        .HasForeignKey("KG3xxOption_LayerTypeNameId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("KnowledgeDB.VariationTarget", "Name")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
